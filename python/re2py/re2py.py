# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_re2py', [dirname(__file__)])
        except ImportError:
            import _re2py
            return _re2py
        if fp is not None:
            try:
                _mod = imp.load_module('_re2py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _re2py = swig_import_helper()
    del swig_import_helper
else:
    import _re2py
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _re2py.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _re2py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _re2py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _re2py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _re2py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _re2py.SwigPyIterator_equal(self, x)

    def copy(self):
        return _re2py.SwigPyIterator_copy(self)

    def next(self):
        return _re2py.SwigPyIterator_next(self)

    def __next__(self):
        return _re2py.SwigPyIterator___next__(self)

    def previous(self):
        return _re2py.SwigPyIterator_previous(self)

    def advance(self, n):
        return _re2py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _re2py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _re2py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _re2py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _re2py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _re2py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _re2py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _re2py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Re2Options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Re2Options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Re2Options, name)
    __repr__ = _swig_repr

    def GetOption(self):
        return _re2py.Re2Options_GetOption(self)

    def utf8(self):
        return _re2py.Re2Options_utf8(self)

    def set_utf8(self, b):
        return _re2py.Re2Options_set_utf8(self, b)

    def posix_syntax(self):
        return _re2py.Re2Options_posix_syntax(self)

    def set_posix_syntax(self, b):
        return _re2py.Re2Options_set_posix_syntax(self, b)

    def longest_match(self):
        return _re2py.Re2Options_longest_match(self)

    def set_longest_match(self, b):
        return _re2py.Re2Options_set_longest_match(self, b)

    def log_errors(self):
        return _re2py.Re2Options_log_errors(self)

    def set_log_errors(self, b):
        return _re2py.Re2Options_set_log_errors(self, b)

    def max_mem(self):
        return _re2py.Re2Options_max_mem(self)

    def set_max_mem(self, m):
        return _re2py.Re2Options_set_max_mem(self, m)

    def literal(self):
        return _re2py.Re2Options_literal(self)

    def set_literal(self, b):
        return _re2py.Re2Options_set_literal(self, b)

    def never_nl(self):
        return _re2py.Re2Options_never_nl(self)

    def set_never_nl(self, b):
        return _re2py.Re2Options_set_never_nl(self, b)

    def dot_nl(self):
        return _re2py.Re2Options_dot_nl(self)

    def set_dot_nl(self, b):
        return _re2py.Re2Options_set_dot_nl(self, b)

    def never_capture(self):
        return _re2py.Re2Options_never_capture(self)

    def set_never_capture(self, b):
        return _re2py.Re2Options_set_never_capture(self, b)

    def case_sensitive(self):
        return _re2py.Re2Options_case_sensitive(self)

    def set_case_sensitive(self, b):
        return _re2py.Re2Options_set_case_sensitive(self, b)

    def perl_classes(self):
        return _re2py.Re2Options_perl_classes(self)

    def set_perl_classes(self, b):
        return _re2py.Re2Options_set_perl_classes(self, b)

    def word_boundary(self):
        return _re2py.Re2Options_word_boundary(self)

    def set_word_boundary(self, b):
        return _re2py.Re2Options_set_word_boundary(self, b)

    def one_line(self):
        return _re2py.Re2Options_one_line(self)

    def set_one_line(self, b):
        return _re2py.Re2Options_set_one_line(self, b)

    def Copy(self, src):
        return _re2py.Re2Options_Copy(self, src)

    def __init__(self):
        this = _re2py.new_Re2Options()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _re2py.delete_Re2Options
    __del__ = lambda self: None
Re2Options_swigregister = _re2py.Re2Options_swigregister
Re2Options_swigregister(Re2Options)

class Re2Set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Re2Set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Re2Set, name)
    __repr__ = _swig_repr

    def __init__(self, options, anchor_id):
        this = _re2py.new_Re2Set(options, anchor_id)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _re2py.delete_Re2Set
    __del__ = lambda self: None

    def Add(self, pattern, error):
        return _re2py.Re2Set_Add(self, pattern, error)

    def Compile(self):
        return _re2py.Re2Set_Compile(self)

    def Match(self, text, v):
        return _re2py.Re2Set_Match(self, text, v)
Re2Set_swigregister = _re2py.Re2Set_swigregister
Re2Set_swigregister(Re2Set)

class IntVectorPointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVectorPointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVectorPointer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _re2py.new_IntVectorPointer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _re2py.delete_IntVectorPointer
    __del__ = lambda self: None

    def Size(self):
        return _re2py.IntVectorPointer_Size(self)

    def Value(self, index):
        return _re2py.IntVectorPointer_Value(self, index)

    def Pointer(self):
        return _re2py.IntVectorPointer_Pointer(self)
IntVectorPointer_swigregister = _re2py.IntVectorPointer_swigregister
IntVectorPointer_swigregister(IntVectorPointer)

class StringPointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPointer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _re2py.new_StringPointer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _re2py.delete_StringPointer
    __del__ = lambda self: None

    def Pointer(self):
        return _re2py.StringPointer_Pointer(self)

    def ToString(self):
        return _re2py.StringPointer_ToString(self)
StringPointer_swigregister = _re2py.StringPointer_swigregister
StringPointer_swigregister(StringPointer)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _re2py.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _re2py.IntVector___nonzero__(self)

    def __bool__(self):
        return _re2py.IntVector___bool__(self)

    def __len__(self):
        return _re2py.IntVector___len__(self)

    def pop(self):
        return _re2py.IntVector_pop(self)

    def __getslice__(self, i, j):
        return _re2py.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _re2py.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _re2py.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _re2py.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _re2py.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _re2py.IntVector___setitem__(self, *args)

    def append(self, x):
        return _re2py.IntVector_append(self, x)

    def empty(self):
        return _re2py.IntVector_empty(self)

    def size(self):
        return _re2py.IntVector_size(self)

    def clear(self):
        return _re2py.IntVector_clear(self)

    def swap(self, v):
        return _re2py.IntVector_swap(self, v)

    def get_allocator(self):
        return _re2py.IntVector_get_allocator(self)

    def begin(self):
        return _re2py.IntVector_begin(self)

    def end(self):
        return _re2py.IntVector_end(self)

    def rbegin(self):
        return _re2py.IntVector_rbegin(self)

    def rend(self):
        return _re2py.IntVector_rend(self)

    def pop_back(self):
        return _re2py.IntVector_pop_back(self)

    def erase(self, *args):
        return _re2py.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _re2py.new_IntVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _re2py.IntVector_push_back(self, x)

    def front(self):
        return _re2py.IntVector_front(self)

    def back(self):
        return _re2py.IntVector_back(self)

    def assign(self, n, x):
        return _re2py.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _re2py.IntVector_resize(self, *args)

    def insert(self, *args):
        return _re2py.IntVector_insert(self, *args)

    def reserve(self, n):
        return _re2py.IntVector_reserve(self, n)

    def capacity(self):
        return _re2py.IntVector_capacity(self)
    __swig_destroy__ = _re2py.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _re2py.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _re2py.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _re2py.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _re2py.DoubleVector___bool__(self)

    def __len__(self):
        return _re2py.DoubleVector___len__(self)

    def pop(self):
        return _re2py.DoubleVector_pop(self)

    def __getslice__(self, i, j):
        return _re2py.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _re2py.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _re2py.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _re2py.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _re2py.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _re2py.DoubleVector___setitem__(self, *args)

    def append(self, x):
        return _re2py.DoubleVector_append(self, x)

    def empty(self):
        return _re2py.DoubleVector_empty(self)

    def size(self):
        return _re2py.DoubleVector_size(self)

    def clear(self):
        return _re2py.DoubleVector_clear(self)

    def swap(self, v):
        return _re2py.DoubleVector_swap(self, v)

    def get_allocator(self):
        return _re2py.DoubleVector_get_allocator(self)

    def begin(self):
        return _re2py.DoubleVector_begin(self)

    def end(self):
        return _re2py.DoubleVector_end(self)

    def rbegin(self):
        return _re2py.DoubleVector_rbegin(self)

    def rend(self):
        return _re2py.DoubleVector_rend(self)

    def pop_back(self):
        return _re2py.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _re2py.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _re2py.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _re2py.DoubleVector_push_back(self, x)

    def front(self):
        return _re2py.DoubleVector_front(self)

    def back(self):
        return _re2py.DoubleVector_back(self)

    def assign(self, n, x):
        return _re2py.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _re2py.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _re2py.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _re2py.DoubleVector_reserve(self, n)

    def capacity(self):
        return _re2py.DoubleVector_capacity(self)
    __swig_destroy__ = _re2py.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _re2py.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class String2IntMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, String2IntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, String2IntMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _re2py.String2IntMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _re2py.String2IntMap___nonzero__(self)

    def __bool__(self):
        return _re2py.String2IntMap___bool__(self)

    def __len__(self):
        return _re2py.String2IntMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _re2py.String2IntMap___getitem__(self, key)

    def __delitem__(self, key):
        return _re2py.String2IntMap___delitem__(self, key)

    def has_key(self, key):
        return _re2py.String2IntMap_has_key(self, key)

    def keys(self):
        return _re2py.String2IntMap_keys(self)

    def values(self):
        return _re2py.String2IntMap_values(self)

    def items(self):
        return _re2py.String2IntMap_items(self)

    def __contains__(self, key):
        return _re2py.String2IntMap___contains__(self, key)

    def key_iterator(self):
        return _re2py.String2IntMap_key_iterator(self)

    def value_iterator(self):
        return _re2py.String2IntMap_value_iterator(self)

    def __setitem__(self, *args):
        return _re2py.String2IntMap___setitem__(self, *args)

    def asdict(self):
        return _re2py.String2IntMap_asdict(self)

    def __init__(self, *args):
        this = _re2py.new_String2IntMap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _re2py.String2IntMap_empty(self)

    def size(self):
        return _re2py.String2IntMap_size(self)

    def clear(self):
        return _re2py.String2IntMap_clear(self)

    def swap(self, v):
        return _re2py.String2IntMap_swap(self, v)

    def get_allocator(self):
        return _re2py.String2IntMap_get_allocator(self)

    def begin(self):
        return _re2py.String2IntMap_begin(self)

    def end(self):
        return _re2py.String2IntMap_end(self)

    def rbegin(self):
        return _re2py.String2IntMap_rbegin(self)

    def rend(self):
        return _re2py.String2IntMap_rend(self)

    def count(self, x):
        return _re2py.String2IntMap_count(self, x)

    def erase(self, *args):
        return _re2py.String2IntMap_erase(self, *args)

    def find(self, x):
        return _re2py.String2IntMap_find(self, x)

    def lower_bound(self, x):
        return _re2py.String2IntMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _re2py.String2IntMap_upper_bound(self, x)
    __swig_destroy__ = _re2py.delete_String2IntMap
    __del__ = lambda self: None
String2IntMap_swigregister = _re2py.String2IntMap_swigregister
String2IntMap_swigregister(String2IntMap)

class Int2StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int2StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int2StringMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _re2py.Int2StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _re2py.Int2StringMap___nonzero__(self)

    def __bool__(self):
        return _re2py.Int2StringMap___bool__(self)

    def __len__(self):
        return _re2py.Int2StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _re2py.Int2StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _re2py.Int2StringMap___delitem__(self, key)

    def has_key(self, key):
        return _re2py.Int2StringMap_has_key(self, key)

    def keys(self):
        return _re2py.Int2StringMap_keys(self)

    def values(self):
        return _re2py.Int2StringMap_values(self)

    def items(self):
        return _re2py.Int2StringMap_items(self)

    def __contains__(self, key):
        return _re2py.Int2StringMap___contains__(self, key)

    def key_iterator(self):
        return _re2py.Int2StringMap_key_iterator(self)

    def value_iterator(self):
        return _re2py.Int2StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _re2py.Int2StringMap___setitem__(self, *args)

    def asdict(self):
        return _re2py.Int2StringMap_asdict(self)

    def __init__(self, *args):
        this = _re2py.new_Int2StringMap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _re2py.Int2StringMap_empty(self)

    def size(self):
        return _re2py.Int2StringMap_size(self)

    def clear(self):
        return _re2py.Int2StringMap_clear(self)

    def swap(self, v):
        return _re2py.Int2StringMap_swap(self, v)

    def get_allocator(self):
        return _re2py.Int2StringMap_get_allocator(self)

    def begin(self):
        return _re2py.Int2StringMap_begin(self)

    def end(self):
        return _re2py.Int2StringMap_end(self)

    def rbegin(self):
        return _re2py.Int2StringMap_rbegin(self)

    def rend(self):
        return _re2py.Int2StringMap_rend(self)

    def count(self, x):
        return _re2py.Int2StringMap_count(self, x)

    def erase(self, *args):
        return _re2py.Int2StringMap_erase(self, *args)

    def find(self, x):
        return _re2py.Int2StringMap_find(self, x)

    def lower_bound(self, x):
        return _re2py.Int2StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _re2py.Int2StringMap_upper_bound(self, x)
    __swig_destroy__ = _re2py.delete_Int2StringMap
    __del__ = lambda self: None
Int2StringMap_swigregister = _re2py.Int2StringMap_swigregister
Int2StringMap_swigregister(Int2StringMap)

# This file is compatible with both classic and new-style classes.


